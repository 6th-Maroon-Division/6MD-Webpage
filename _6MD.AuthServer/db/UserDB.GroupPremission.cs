//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 06.03.2025 17:32:34
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace _6MD.AuthServer.DB
{
    public partial class GroupPremission : INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private Guid _Guid;

        private string _Key;

        private int _Power;

        private Groups _Groups;

        public GroupPremission()
        {
            OnCreated();
        }

        public Guid Guid
        {
            get
            {
                return this._Guid;
            }
            set
            {
                if (this._Guid != value)
                {
                    this.SendPropertyChanging("Guid");
                    this._Guid = value;
                    this.SendPropertyChanged("Guid");
                }
            }
        }

        public string Key
        {
            get
            {
                return this._Key;
            }
            set
            {
                if (this._Key != value)
                {
                    this.SendPropertyChanging("Key");
                    this._Key = value;
                    this.SendPropertyChanged("Key");
                }
            }
        }

        public int Power
        {
            get
            {
                return this._Power;
            }
            set
            {
                if (this._Power != value)
                {
                    this.SendPropertyChanging("Power");
                    this._Power = value;
                    this.SendPropertyChanged("Power");
                }
            }
        }

        public virtual Groups Groups
        {
            get
            {
                return this._Groups;
            }
            set
            {
                if (this._Groups != value)
                {
                    this.SendPropertyChanging("Groups");
                    this._Groups = value;
                    this.SendPropertyChanged("Groups");
                }
            }
        }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
