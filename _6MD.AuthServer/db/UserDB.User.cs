//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 16.03.2025 12:40:55
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace _6MD.AuthServer.DB
{
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private Guid _Guid;

        private string _Name;

        private string? _Email;

        private string? _PasswordHash;

        private bool _Retired;

        private string? _PasswordSalt;

        private IList<UserPremission> _Premissions;

        private IList<OAuthAccount> _OAuthAccounts;

        private IList<Groups> _Groups;

        private Ranks _Ranks;

        public User()
        {
            this._Premissions = new List<UserPremission>();
            this._OAuthAccounts = new List<OAuthAccount>();
            this._Groups = new List<Groups>();
            OnCreated();
        }

        public Guid Guid
        {
            get
            {
                return this._Guid;
            }
            set
            {
                if (this._Guid != value)
                {
                    this.SendPropertyChanging("Guid");
                    this._Guid = value;
                    this.SendPropertyChanged("Guid");
                }
            }
        }

        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                }
            }
        }

        public string? Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                }
            }
        }

        public string? PasswordHash
        {
            get
            {
                return this._PasswordHash;
            }
            set
            {
                if (this._PasswordHash != value)
                {
                    this.SendPropertyChanging("PasswordHash");
                    this._PasswordHash = value;
                    this.SendPropertyChanged("PasswordHash");
                }
            }
        }

        public bool Retired
        {
            get
            {
                return this._Retired;
            }
            set
            {
                if (this._Retired != value)
                {
                    this.SendPropertyChanging("Retired");
                    this._Retired = value;
                    this.SendPropertyChanged("Retired");
                }
            }
        }

        public string? PasswordSalt
        {
            get
            {
                return this._PasswordSalt;
            }
            set
            {
                if (this._PasswordSalt != value)
                {
                    this.SendPropertyChanging("PasswordSalt");
                    this._PasswordSalt = value;
                    this.SendPropertyChanged("PasswordSalt");
                }
            }
        }

        public virtual IList<UserPremission> Premissions
        {
            get
            {
                return this._Premissions;
            }
            set
            {
                this._Premissions = value;
            }
        }

        public virtual IList<OAuthAccount> OAuthAccounts
        {
            get
            {
                return this._OAuthAccounts;
            }
            set
            {
                this._OAuthAccounts = value;
            }
        }

        public virtual IList<Groups> Groups
        {
            get
            {
                return this._Groups;
            }
            set
            {
                this._Groups = value;
            }
        }

        public virtual Ranks Ranks
        {
            get
            {
                return this._Ranks;
            }
            set
            {
                if (this._Ranks != value)
                {
                    this.SendPropertyChanging("Ranks");
                    this._Ranks = value;
                    this.SendPropertyChanged("Ranks");
                }
            }
        }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
