//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 16.03.2025 12:40:55
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable enable annotations
#nullable disable warnings

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;

namespace _6MD.AuthServer.DB
{
    public partial class OAuthAccount : INotifyPropertyChanging, INotifyPropertyChanged {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private Guid _Guid;

        private string _Provider;

        private string _provider_id;

        private string? _access_token;

        private string? _refresh_token;

        private DateTime? _expires_at;

        private DateTime _CreatedAt;

        private DateTime _UpdatedAt;

        private User _User;

        public OAuthAccount()
        {
            OnCreated();
        }

        public Guid Guid
        {
            get
            {
                return this._Guid;
            }
            set
            {
                if (this._Guid != value)
                {
                    this.SendPropertyChanging("Guid");
                    this._Guid = value;
                    this.SendPropertyChanged("Guid");
                }
            }
        }

        public string Provider
        {
            get
            {
                return this._Provider;
            }
            set
            {
                if (this._Provider != value)
                {
                    this.SendPropertyChanging("Provider");
                    this._Provider = value;
                    this.SendPropertyChanged("Provider");
                }
            }
        }

        public string provider_id
        {
            get
            {
                return this._provider_id;
            }
            set
            {
                if (this._provider_id != value)
                {
                    this.SendPropertyChanging("provider_id");
                    this._provider_id = value;
                    this.SendPropertyChanged("provider_id");
                }
            }
        }

        public string? access_token
        {
            get
            {
                return this._access_token;
            }
            set
            {
                if (this._access_token != value)
                {
                    this.SendPropertyChanging("access_token");
                    this._access_token = value;
                    this.SendPropertyChanged("access_token");
                }
            }
        }

        public string? refresh_token
        {
            get
            {
                return this._refresh_token;
            }
            set
            {
                if (this._refresh_token != value)
                {
                    this.SendPropertyChanging("refresh_token");
                    this._refresh_token = value;
                    this.SendPropertyChanged("refresh_token");
                }
            }
        }

        public DateTime? expires_at
        {
            get
            {
                return this._expires_at;
            }
            set
            {
                if (this._expires_at != value)
                {
                    this.SendPropertyChanging("expires_at");
                    this._expires_at = value;
                    this.SendPropertyChanged("expires_at");
                }
            }
        }

        public DateTime CreatedAt
        {
            get
            {
                return this._CreatedAt;
            }
            set
            {
                if (this._CreatedAt != value)
                {
                    this.SendPropertyChanging("CreatedAt");
                    this._CreatedAt = value;
                    this.SendPropertyChanged("CreatedAt");
                }
            }
        }

        public DateTime UpdatedAt
        {
            get
            {
                return this._UpdatedAt;
            }
            set
            {
                if (this._UpdatedAt != value)
                {
                    this.SendPropertyChanging("UpdatedAt");
                    this._UpdatedAt = value;
                    this.SendPropertyChanged("UpdatedAt");
                }
            }
        }

        public virtual User User
        {
            get
            {
                return this._User;
            }
            set
            {
                if (this._User != value)
                {
                    this.SendPropertyChanging("User");
                    this._User = value;
                    this.SendPropertyChanged("User");
                }
            }
        }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
