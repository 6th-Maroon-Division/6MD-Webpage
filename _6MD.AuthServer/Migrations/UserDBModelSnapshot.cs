// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _6MD.AuthServer.DB;

#nullable disable

namespace _6MD.AuthServer.Migrations
{
    [DbContext(typeof(UserDB))]
    partial class UserDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupsUser", b =>
                {
                    b.Property<Guid>("GroupsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsGuid", "UsersGuid");

                    b.HasIndex("UsersGuid");

                    b.ToTable("GroupsUser");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.GroupPremission", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<Guid>("GroupGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("GroupGuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key");

                    b.Property<int>("Power")
                        .HasColumnType("integer")
                        .HasColumnName("Power");

                    b.HasKey("Guid");

                    b.HasIndex("GroupGuid");

                    b.ToTable("GroupPremissions", (string)null);
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.Groups", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Guid");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.OAuthAccount", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Provider");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGuid");

                    b.Property<string>("access_token")
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("expires_at")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("provider_id")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_id");

                    b.Property<string>("refresh_token")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("OAuthAccounts", (string)null);
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.Ranks", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Prefix");

                    b.HasKey("Guid");

                    b.ToTable("Ranks", (string)null);
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<Guid?>("RanksGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("RanksGuid");

                    b.Property<bool>("Retired")
                        .HasColumnType("boolean")
                        .HasColumnName("Retired");

                    b.HasKey("Guid");

                    b.HasIndex("RanksGuid");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.UserPremission", b =>
                {
                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid")
                        .HasColumnName("Guid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Key");

                    b.Property<int>("Power")
                        .HasColumnType("integer")
                        .HasColumnName("Power");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGuid");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("UserPremissions", (string)null);
                });

            modelBuilder.Entity("GroupsUser", b =>
                {
                    b.HasOne("_6MD.AuthServer.DB.Groups", null)
                        .WithMany()
                        .HasForeignKey("GroupsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_6MD.AuthServer.DB.User", null)
                        .WithMany()
                        .HasForeignKey("UsersGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.GroupPremission", b =>
                {
                    b.HasOne("_6MD.AuthServer.DB.Groups", "Groups")
                        .WithMany("Premissions")
                        .HasForeignKey("GroupGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.OAuthAccount", b =>
                {
                    b.HasOne("_6MD.AuthServer.DB.User", "User")
                        .WithMany("OAuthAccounts")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.User", b =>
                {
                    b.HasOne("_6MD.AuthServer.DB.Ranks", "Ranks")
                        .WithMany("Users")
                        .HasForeignKey("RanksGuid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.UserPremission", b =>
                {
                    b.HasOne("_6MD.AuthServer.DB.User", "User")
                        .WithMany("Premissions")
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.Groups", b =>
                {
                    b.Navigation("Premissions");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.Ranks", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("_6MD.AuthServer.DB.User", b =>
                {
                    b.Navigation("OAuthAccounts");

                    b.Navigation("Premissions");
                });
#pragma warning restore 612, 618
        }
    }
}
