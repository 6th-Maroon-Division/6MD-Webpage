@page "/orbat"
@rendermode InteractiveServer
@using System.Collections.Generic
@using Microsoft.AspNetCore.Components

<!-- Buttons -->
<div class="action-buttons">
    <button class="btn-attending" @onclick="ShowAttendingModal">Attending</button>
    <button class="btn-absent" @onclick="ShowAbsentModal">Absent</button>
    <button class="btn-late" @onclick="ShowLateUnsureModal">Late/Unsure</button>
</div>

<!-- Modals -->
@if (IsAttendingModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Attending</h3>
            <label for="section">Select Section:</label>
            <select id="section" @bind="SelectedSection">
                <option value="">--Select Section--</option>
                @foreach (var section in Sections)
                {
                    <option value="@(section.Id)">@Labels[section.Id]</option>
                }
            </select>

            <label for="role">Select Role:</label>
            <select id="role" @bind="SelectedRole" disabled="@(string.IsNullOrEmpty(SelectedSection))">
                <option value="">--Select Role--</option>
                @if (!string.IsNullOrEmpty(SelectedSection))
                {
                    @foreach (var role in Sections.First(s => s.Id == SelectedSection).Roles)
                    {
                        <option value="@role.Id">@role.Name</option>
                    }
                }
            </select>

            <button class="btn-save" @onclick="SaveAttending">Save</button>
            <button class="btn-cancel" @onclick="CloseModals">Cancel</button>
        </div>
    </div>
}

@if (IsAbsentModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Absent</h3>
            <label for="reason">Reason:</label>
            <textarea id="reason" @bind="AbsentReason"></textarea>
            <button class="btn-save" @onclick="SaveAbsent">Save</button>
            <button class="btn-cancel" @onclick="CloseModals">Cancel</button>
        </div>
    </div>
}

@if (IsLateUnsureModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <h3>Late/Unsure</h3>
            <label for="duration">Estimated Time (if late):</label>
            <input id="duration" type="text" @bind="LateDuration" />
            <label for="unsure-reason">Reason:</label>
            <textarea id="unsure-reason" @bind="LateReason"></textarea>
            <button class="btn-save" @onclick="SaveLateUnsure">Save</button>
            <button class="btn-cancel" @onclick="CloseModals">Cancel</button>
        </div>
    </div>
}

<div class="operation-dashboard">

    <!-- Main Sections -->
    <div class="main-content">
        <div class="top-content">
            <!-- Top Sections -->
            <div class="top-sections section status-sections">
                <!-- Zeus (High Command) -->
                <div class="section">
                    <h4>@Labels["zeus-section"]</h4>
                    <ul>
                        <li>
                            <label>@Labels["zeus"]:</label>
                            <span>@Data["zeus"]</span>
                        </li>
                        <li>
                            <label>@Labels["roleplayer"]:</label>
                            <span>@Data["roleplayer"]</span>
                        </li>
                    </ul>
                </div>

                <!-- HQ Section (Actual) -->
                <div class="section">
                    <h4>@Labels["hq-section"]</h4>
                    <ul>
                        <li>
                            <label>@Labels["pl-leader"]:</label>
                            <span>@Data["pl-leader"]</span>
                        </li>
                        <li>
                            <label>@Labels["drone-operator"]:</label>
                            <span>@Data["drone-operator"]</span>
                        </li>
                        <li>
                            <label>@Labels["pl-medic"]:</label>
                            <span>@Data["pl-medic"]</span>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Absent -->
            <div class="section status-sections">
                <h4>@Labels["absent"]</h4>
                <table>
                    <thead>
                        <tr>
                            <th>@Labels["name"]</th>
                            <th>@Labels["reason"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var person in Absent)
                        {
                            <tr>
                                <td><span>@person.Name</span></td>
                                <td><span>@person.Reason</span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Late/Unsure -->
            <div class="section status-sections">
                <h4>@Labels["late-unsure"]</h4>
                <table>
                    <thead>
                        <tr>
                            <th>@Labels["name"]</th>
                            <th>@Labels["reason"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var person in LateUnsure)
                        {
                            <tr>
                                <td><span>@person.Name</span></td>
                                <td><span>@person.Reason</span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="sections">
            <!-- Sections dynamically generated -->
            @foreach (var section in Sections)
            {
                <div class="section">
                    <h4>@Labels[section.Id]</h4>
                    <ul>
                        @foreach (var role in section.Roles)
                        {
                            <li>
                                <label>@role.Name:</label>
                                <span>@Data[role.Id]</span>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    </div>

    <!-- Sidebar -->
    <div class="sidebar">
        <div class="radio-frequencies-box">
            <h3>@Labels["radio-frequencies"]</h3>
            <ul>
                @foreach (var frequency in RadioFrequencies)
                {
                    <li>
                        <label>@frequency.Label:</label>
                        <span>@frequency.Value</span>
                    </li>
                }
            </ul>
        </div>

        <div class="extra-intel-box">
            <h3>@Labels["extra-intel"]</h3>
            <ul>
                @foreach (var intel in ExtraIntel)
                {
                    <li>
                        <strong>@intel.Key:</strong>
                        <span>@intel.Value</span>
                    </li>
                }
            </ul>
        </div>

        <div class="relations">
            <h3>@Labels["relations"]</h3>
            <div class="Factions">
                @foreach (var faction in Factions)
                {
                    <ul>
                        <li><strong>@faction.Key:</strong> <span>@faction.Name</span></li>
                        <li><strong>@Labels["war-support"]:</strong> <span>@faction.Support</span></li>
                    </ul>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // Labels dictionary for all labels on the page
    private Dictionary<string, string> Labels = new()
    {
        { "zeus-section", "Zeus (High Command)" },
        { "zeus", "Zeus" },
        { "roleplayer", "Roleplayer" },
        { "hq-section", "HQ Section (Actual)" },
        { "pl-leader", "Platoon Leader" },
        { "drone-operator", "Drone Operator" },
        { "pl-medic", "Platoon Medic" },
        { "absent", "Absent" },
        { "name", "Name" },
        { "reason", "Reason" },
        { "late-unsure", "Late/Unsure" },
        { "radio-frequencies", "Radio Frequencies" },
        { "extra-intel", "Extra Intel" },
        { "relations", "Relations" },
        { "war-support", "War Support" },
        { "1-section", "1 Section (Alpha, Bravo)" },
        { "2-section", "2 Section (Alpha, Bravo)" },
        { "3-section", "3 Section (Alpha, Bravo)" },
        { "armoured", "Armored Asset" }
        // Add additional labels for other sections and roles
    };

    // Data dictionary for all dynamic data on the page
    private Dictionary<string, string> Data = new()
    {
        { "zeus", "John Doe" },
        { "roleplayer", "Jane Smith" },
        { "pl-leader", "Captain Miller" },
        { "drone-operator", "Lt. Carter" },
        { "pl-medic", "Dr. Roberts" },
        { "slot10", "Sgt. Williams" },
        { "slot11", "Cpl. Brown" },
        { "slot12", "Cpl. Johnson" },
        { "slot13", "Pvt. Davis" },
        { "slot14", "Pvt. Martinez" },
        { "slot15", "Pvt. Smith" },
        { "slot16", "Cpl. Thompson" },
        { "slot17", "Eng. Taylor" },
        { "slot18", "Pvt. Wilson" },
        { "slot19", "Pvt. Lee" },
        { "slot44", "Pvt. Lee" },
        { "slot40", "Pvt. Lee" },
        { "slot41", "Pvt. Lee" },
        { "slot42", "Pvt. Lee" },
        { "slot43", "Pvt. Lee" }
        // Add additional data for other roles
    };

    // Sections data
    private List<(string Id, List<(string Id, string Name)> Roles)> Sections = new()
    {
        ("1-section", new List<(string Id, string Name)>
        {
            ("slot10", "SL"),
            ("slot11", "Medic"),
            ("slot12", "FTL"),
            ("slot13", "Rifleman"),
            ("slot14", "Medium AT"),
            ("slot15", "AT Assist"),
            ("slot16", "FTL"),
            ("slot17", "Engineer"),
            ("slot18", "LMG"),
            ("slot19", "Ammo Bearer")
        }),
        ("2-section", new List<(string Id, string Name)>
        {
            ("slot10", "SL"),
            ("slot11", "Medic"),
            ("slot12", "FTL"),
            ("slot13", "Rifleman"),
            ("slot14", "Medium AT"),
            ("slot15", "AT Assist"),
            ("slot16", "FTL"),
            ("slot17", "Engineer"),
            ("slot18", "LMG"),
            ("slot19", "Ammo Bearer")
        }),
        ("3-section", new List<(string Id, string Name)>
        {
            ("slot10", "SL"),
            ("slot11", "Medic"),
            ("slot12", "FTL"),
            ("slot13", "Rifleman"),
            ("slot14", "Medium AT"),
            ("slot15", "AT Assist"),
            ("slot16", "FTL"),
            ("slot17", "Engineer"),
            ("slot18", "LMG"),
            ("slot19", "Ammo Bearer")
        }),
        ("armoured", new List<(string Id, string Name)>
        {
            ("slot40", "Gunner"),
            ("slot41", "Driver"),
            ("slot42", "Commander"),
            ("slot43", "Engineer")
        })
        // Add more sections here
    };

    private List<(string Name, string Reason)> Absent = new()
    {
        ("James", "Personal"),
        ("Anna", "Vacation")
    };

    private List<(string Name, string Reason)> LateUnsure = new()
    {
        ("Michael", "Traffic"),
        ("Sarah", "Delayed Flight")
    };

    private List<(string Label, string Value)> RadioFrequencies = new()
    {
        ("Command Net", "50LR"),
        ("Medic Net", "90.0ASR")
    };

    private List<KeyValuePair<string, string>> ExtraIntel = new()
    {
        new("IED/Trap/Mine Threat", "Medium"),
        new("Civilian Relationship", "Neutral")
    };

    private List<(string Key, string Name, string Support)> Factions = new()
    {
        ("BLUFOR", "NATO", "Holding"),
        ("OPFOR", "ISIS", "Hostile")
    };


    private bool IsAttendingModalOpen = false;
    private bool IsAbsentModalOpen = false;
    private bool IsLateUnsureModalOpen = false;
    private string _selectedSection = string.Empty;
    private string SelectedSection
    {
        get => _selectedSection;
        set
        {
            if (_selectedSection != value)
            {
                _selectedSection = value;
                SelectedRole = string.Empty; // Reset the role when section changes
            }
        }
    }
    private string SelectedRole = string.Empty;
    private string AbsentReason = string.Empty;
    private string LateDuration = string.Empty;
    private string LateReason = string.Empty;

    private void ShowAttendingModal()
    {
        IsAttendingModalOpen = true;
    }

    private void ShowAbsentModal()
    {
        IsAbsentModalOpen = true;
    }

    private void ShowLateUnsureModal()
    {
        IsLateUnsureModalOpen = true;
    }

    private void CloseModals()
    {
        IsAttendingModalOpen = false;
        IsAbsentModalOpen = false;
        IsLateUnsureModalOpen = false;

        SelectedSection = string.Empty;
        SelectedRole = string.Empty;
        AbsentReason = string.Empty;
        LateDuration = string.Empty;
        LateReason = string.Empty;
    }

    private void SaveAttending()
    {
        Console.WriteLine($"Attending: Section={SelectedSection}, Role={SelectedRole}");
        CloseModals();
    }

    private void SaveAbsent()
    {
        Console.WriteLine($"Absent: Reason={AbsentReason}");
        CloseModals();
    }

    private void SaveLateUnsure()
    {
        Console.WriteLine($"Late/Unsure: Duration={LateDuration}, Reason={LateReason}");
        CloseModals();
    }
}
