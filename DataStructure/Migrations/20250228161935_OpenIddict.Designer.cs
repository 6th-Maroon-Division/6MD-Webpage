// <auto-generated />
using System;
using DataStructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataStructure.Migrations
{
    [DbContext(typeof(DB))]
    [Migration("20250228161935_OpenIddict")]
    partial class OpenIddict
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataStructure.Attendance", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<int>("AttendanceTakenByID")
                        .HasColumnType("integer")
                        .HasColumnName("AttendanceTakenByID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date");

                    b.Property<DateTime>("LastChanged")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastChanged");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AttendanceTakenByID");

                    b.HasIndex("UserID");

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("DataStructure.Deduction", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<DateTime>("LastDeduction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastDeduction");

                    b.Property<int>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("Points");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.Property<int>("UserID1")
                        .HasColumnType("integer")
                        .HasColumnName("UserID1");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserID1");

                    b.ToTable("Deductions", (string)null);
                });

            modelBuilder.Entity("DataStructure.Groups", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<long?>("DiscordRoleID")
                        .HasColumnType("bigint")
                        .HasColumnName("DiscordRoleID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<long>("Premissions")
                        .HasColumnType("bigint")
                        .HasColumnName("Premissions");

                    b.Property<string>("RoleColor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RoleColor");

                    b.HasKey("ID");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("DataStructure.LOA", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("End");

                    b.Property<bool>("EndIndefinet")
                        .HasColumnType("boolean")
                        .HasColumnName("EndIndefinet");

                    b.Property<DateTime>("LastEdit")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastEdit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Reason");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Start");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("LOAs", (string)null);
                });

            modelBuilder.Entity("DataStructure.OPAttendance", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<TimeSpan?>("Late")
                        .HasColumnType("interval")
                        .HasColumnName("Late");

                    b.Property<int>("OperationID")
                        .HasColumnType("integer")
                        .HasColumnName("OperationID");

                    b.Property<string>("Reason")
                        .HasColumnType("text")
                        .HasColumnName("Reason");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("Status");

                    b.Property<int>("UserID")
                        .HasColumnType("integer")
                        .HasColumnName("UserID");

                    b.HasKey("ID");

                    b.HasIndex("OperationID");

                    b.HasIndex("UserID");

                    b.ToTable("OPAttendances", (string)null);
                });

            modelBuilder.Entity("DataStructure.Operation", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created");

                    b.Property<DateTime>("DateTimeOfOP")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateTimeOfOP");

                    b.Property<DateTime>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastModified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("Type");

                    b.HasKey("ID");

                    b.ToTable("Operations", (string)null);
                });

            modelBuilder.Entity("DataStructure.Rank", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<long?>("DiscordRoleID")
                        .HasColumnType("bigint")
                        .HasColumnName("DiscordRoleID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abbreviation");

                    b.HasKey("ID");

                    b.ToTable("Ranks", (string)null);
                });

            modelBuilder.Entity("DataStructure.Section", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("OperationID")
                        .HasColumnType("integer")
                        .HasColumnName("OperationID");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type");

                    b.HasKey("ID");

                    b.HasIndex("OperationID");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("DataStructure.Slot", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<int>("Color")
                        .HasColumnType("integer")
                        .HasColumnName("Color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("SectionID")
                        .HasColumnType("integer")
                        .HasColumnName("SectionID");

                    b.Property<int>("TrainingID")
                        .HasColumnType("integer")
                        .HasColumnName("TrainingID");

                    b.HasKey("ID");

                    b.HasIndex("SectionID");

                    b.HasIndex("TrainingID");

                    b.ToTable("Slots", (string)null);
                });

            modelBuilder.Entity("DataStructure.Trainers", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<bool>("HeadTrainer")
                        .HasColumnType("boolean")
                        .HasColumnName("HeadTrainer");

                    b.Property<int>("TrainingID")
                        .HasColumnType("integer")
                        .HasColumnName("TrainingID");

                    b.HasKey("ID");

                    b.HasIndex("TrainingID");

                    b.ToTable("Trainers", (string)null);
                });

            modelBuilder.Entity("DataStructure.Training", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("ID");

                    b.ToTable("Trainings", (string)null);
                });

            modelBuilder.Entity("DataStructure.User", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<DateTime>("DateJoined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateJoined");

                    b.Property<long>("DiscordID")
                        .HasColumnType("bigint")
                        .HasColumnName("DiscordID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int?>("RankID")
                        .HasColumnType("integer")
                        .HasColumnName("RankID");

                    b.Property<bool>("Retired")
                        .HasColumnType("boolean")
                        .HasColumnName("Retired");

                    b.Property<long>("UserPremissions")
                        .HasColumnType("bigint")
                        .HasColumnName("UserPremissions");

                    b.HasKey("ID");

                    b.HasIndex("RankID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GroupsUser", b =>
                {
                    b.Property<int>("GroupsID")
                        .HasColumnType("integer");

                    b.Property<int>("UsersID")
                        .HasColumnType("integer");

                    b.HasKey("GroupsID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("GroupsUser");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("OperationUser", b =>
                {
                    b.Property<int>("OperationsID")
                        .HasColumnType("integer");

                    b.Property<int>("UsersID")
                        .HasColumnType("integer");

                    b.HasKey("OperationsID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("OperationUser");
                });

            modelBuilder.Entity("TrainersUser", b =>
                {
                    b.Property<int>("TrainersID")
                        .HasColumnType("integer");

                    b.Property<int>("UsersID")
                        .HasColumnType("integer");

                    b.HasKey("TrainersID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("TrainersUser");
                });

            modelBuilder.Entity("TrainingUser", b =>
                {
                    b.Property<int>("TrainingsID")
                        .HasColumnType("integer");

                    b.Property<int>("UsersID")
                        .HasColumnType("integer");

                    b.HasKey("TrainingsID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("TrainingUser");
                });

            modelBuilder.Entity("DataStructure.Attendance", b =>
                {
                    b.HasOne("DataStructure.User", "AttendanceTakenBy")
                        .WithMany("AttendanceTaken")
                        .HasForeignKey("AttendanceTakenByID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttendanceTakenBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataStructure.Deduction", b =>
                {
                    b.HasOne("DataStructure.User", "User")
                        .WithMany("Deductions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", "DeductedBy")
                        .WithMany("DeductionsGiven")
                        .HasForeignKey("UserID1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeductedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataStructure.LOA", b =>
                {
                    b.HasOne("DataStructure.User", "User")
                        .WithMany("LOAs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataStructure.OPAttendance", b =>
                {
                    b.HasOne("DataStructure.Slot", "Slot")
                        .WithOne("OPAttendance")
                        .HasForeignKey("DataStructure.OPAttendance", "ID");

                    b.HasOne("DataStructure.Operation", "Operation")
                        .WithMany("OPAttendances")
                        .HasForeignKey("OperationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", "User1")
                        .WithMany("OPAttendances")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Slot");

                    b.Navigation("User1");
                });

            modelBuilder.Entity("DataStructure.Operation", b =>
                {
                    b.HasOne("DataStructure.Attendance", "Attendance")
                        .WithOne("Operation")
                        .HasForeignKey("DataStructure.Operation", "ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("DataStructure.Section", b =>
                {
                    b.HasOne("DataStructure.Operation", "Operation")
                        .WithMany("Sections")
                        .HasForeignKey("OperationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("DataStructure.Slot", b =>
                {
                    b.HasOne("DataStructure.Section", "Section")
                        .WithMany("Slots")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.Training", "Training")
                        .WithMany("Slots")
                        .HasForeignKey("TrainingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("DataStructure.Trainers", b =>
                {
                    b.HasOne("DataStructure.Training", "Training")
                        .WithMany("Trainers")
                        .HasForeignKey("TrainingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("DataStructure.User", b =>
                {
                    b.HasOne("DataStructure.Rank", "Rank")
                        .WithMany("Users")
                        .HasForeignKey("RankID");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("GroupsUser", b =>
                {
                    b.HasOne("DataStructure.Groups", null)
                        .WithMany()
                        .HasForeignKey("GroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("OperationUser", b =>
                {
                    b.HasOne("DataStructure.Operation", null)
                        .WithMany()
                        .HasForeignKey("OperationsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainersUser", b =>
                {
                    b.HasOne("DataStructure.Trainers", null)
                        .WithMany()
                        .HasForeignKey("TrainersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingUser", b =>
                {
                    b.HasOne("DataStructure.Training", null)
                        .WithMany()
                        .HasForeignKey("TrainingsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataStructure.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataStructure.Attendance", b =>
                {
                    b.Navigation("Operation")
                        .IsRequired();
                });

            modelBuilder.Entity("DataStructure.Operation", b =>
                {
                    b.Navigation("OPAttendances");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("DataStructure.Rank", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataStructure.Section", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DataStructure.Slot", b =>
                {
                    b.Navigation("OPAttendance")
                        .IsRequired();
                });

            modelBuilder.Entity("DataStructure.Training", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("DataStructure.User", b =>
                {
                    b.Navigation("AttendanceTaken");

                    b.Navigation("Attendances");

                    b.Navigation("Deductions");

                    b.Navigation("DeductionsGiven");

                    b.Navigation("LOAs");

                    b.Navigation("OPAttendances");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
