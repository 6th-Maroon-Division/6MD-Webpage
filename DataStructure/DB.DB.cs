//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 14.02.2025 15:51:53
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataStructure
{

    public partial class DB : DbContext
    {

        public DB() :
            base()
        {
            OnCreated();
        }

        public DB(DbContextOptions<DB> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UsePostgreSql(@"");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        public virtual DbSet<Rank> Ranks
        {
            get;
            set;
        }

        public virtual DbSet<Groups> Groups
        {
            get;
            set;
        }

        public virtual DbSet<LOA> LOAs
        {
            get;
            set;
        }

        public virtual DbSet<Operation> Operations
        {
            get;
            set;
        }

        public virtual DbSet<Section> Sections
        {
            get;
            set;
        }

        public virtual DbSet<Slot> Slots
        {
            get;
            set;
        }

        public virtual DbSet<Training> Trainings
        {
            get;
            set;
        }

        public virtual DbSet<Trainers> Trainers
        {
            get;
            set;
        }

        public virtual DbSet<OPAttendance> OPAttendances
        {
            get;
            set;
        }

        public virtual DbSet<Attendance> Attendances
        {
            get;
            set;
        }

        public virtual DbSet<Deduction> Deductions
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.RankMapping(modelBuilder);
            this.CustomizeRankMapping(modelBuilder);

            this.GroupsMapping(modelBuilder);
            this.CustomizeGroupsMapping(modelBuilder);

            this.LOAMapping(modelBuilder);
            this.CustomizeLOAMapping(modelBuilder);

            this.OperationMapping(modelBuilder);
            this.CustomizeOperationMapping(modelBuilder);

            this.SectionMapping(modelBuilder);
            this.CustomizeSectionMapping(modelBuilder);

            this.SlotMapping(modelBuilder);
            this.CustomizeSlotMapping(modelBuilder);

            this.TrainingMapping(modelBuilder);
            this.CustomizeTrainingMapping(modelBuilder);

            this.TrainersMapping(modelBuilder);
            this.CustomizeTrainersMapping(modelBuilder);

            this.OPAttendanceMapping(modelBuilder);
            this.CustomizeOPAttendanceMapping(modelBuilder);

            this.AttendanceMapping(modelBuilder);
            this.CustomizeAttendanceMapping(modelBuilder);

            this.DeductionMapping(modelBuilder);
            this.CustomizeDeductionMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users");
            modelBuilder.Entity<User>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.DateJoined).HasColumnName(@"DateJoined").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property(x => x.Retired).HasColumnName(@"Retired").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.DiscordID).HasColumnName(@"DiscordID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.UserPremissions).HasColumnName(@"UserPremissions").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<User>().Property(x => x.RankID).HasColumnName(@"RankID").ValueGeneratedNever();
            modelBuilder.Entity<User>().HasKey(@"ID");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region Rank Mapping

        private void RankMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Rank>().ToTable(@"Ranks");
            modelBuilder.Entity<Rank>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Rank>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Rank>().Property(x => x.DiscordRoleID).HasColumnName(@"DiscordRoleID").ValueGeneratedNever();
            modelBuilder.Entity<Rank>().Property(x => x.abbreviation).HasColumnName(@"abbreviation").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Rank>().Property(x => x.Color).HasColumnName(@"Color").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Rank>().HasKey(@"ID");
        }

        partial void CustomizeRankMapping(ModelBuilder modelBuilder);

        #endregion

        #region Groups Mapping

        private void GroupsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Groups>().ToTable(@"Groups");
            modelBuilder.Entity<Groups>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Groups>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Groups>().Property(x => x.Premissions).HasColumnName(@"Premissions").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Groups>().Property(x => x.DiscordRoleID).HasColumnName(@"DiscordRoleID").ValueGeneratedNever();
            modelBuilder.Entity<Groups>().Property(x => x.RoleColor).HasColumnName(@"RoleColor").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Groups>().HasKey(@"ID");
        }

        partial void CustomizeGroupsMapping(ModelBuilder modelBuilder);

        #endregion

        #region LOA Mapping

        private void LOAMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LOA>().ToTable(@"LOAs");
            modelBuilder.Entity<LOA>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LOA>().Property(x => x.Start).HasColumnName(@"Start").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LOA>().Property(x => x.End).HasColumnName(@"End").ValueGeneratedNever();
            modelBuilder.Entity<LOA>().Property(x => x.EndIndefinet).HasColumnName(@"EndIndefinet").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LOA>().Property(x => x.Reason).HasColumnName(@"Reason").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<LOA>().Property(x => x.LastEdit).HasColumnName(@"LastEdit").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<LOA>().Property(x => x.UserID).HasColumnName(@"UserID").ValueGeneratedNever();
            modelBuilder.Entity<LOA>().HasKey(@"ID");
        }

        partial void CustomizeLOAMapping(ModelBuilder modelBuilder);

        #endregion

        #region Operation Mapping

        private void OperationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Operation>().ToTable(@"Operations");
            modelBuilder.Entity<Operation>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Operation>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Operation>().Property(x => x.DateTimeOfOP).HasColumnName(@"DateTimeOfOP").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Operation>().Property(x => x.Created).HasColumnName(@"Created").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Operation>().Property(x => x.LastModified).HasColumnName(@"LastModified").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<Operation>().Property(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Operation>().HasKey(@"ID");
        }

        partial void CustomizeOperationMapping(ModelBuilder modelBuilder);

        #endregion

        #region Section Mapping

        private void SectionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Section>().ToTable(@"Sections");
            modelBuilder.Entity<Section>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Section>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Section>().Property(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Section>().Property(x => x.OperationID).HasColumnName(@"OperationID").ValueGeneratedNever();
            modelBuilder.Entity<Section>().HasKey(@"ID");
        }

        partial void CustomizeSectionMapping(ModelBuilder modelBuilder);

        #endregion

        #region Slot Mapping

        private void SlotMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Slot>().ToTable(@"Slots");
            modelBuilder.Entity<Slot>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Slot>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Slot>().Property(x => x.Color).HasColumnName(@"Color").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Slot>().Property(x => x.SectionID).HasColumnName(@"SectionID").ValueGeneratedNever();
            modelBuilder.Entity<Slot>().Property(x => x.TrainingID).HasColumnName(@"TrainingID").ValueGeneratedNever();
            modelBuilder.Entity<Slot>().HasKey(@"ID");
        }

        partial void CustomizeSlotMapping(ModelBuilder modelBuilder);

        #endregion

        #region Training Mapping

        private void TrainingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Training>().ToTable(@"Trainings");
            modelBuilder.Entity<Training>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Training>().Property(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Training>().HasKey(@"ID");
        }

        partial void CustomizeTrainingMapping(ModelBuilder modelBuilder);

        #endregion

        #region Trainers Mapping

        private void TrainersMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Trainers>().ToTable(@"Trainers");
            modelBuilder.Entity<Trainers>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Trainers>().Property(x => x.HeadTrainer).HasColumnName(@"HeadTrainer").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Trainers>().Property(x => x.Active).HasColumnName(@"Active").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Trainers>().Property(x => x.TrainingID).HasColumnName(@"TrainingID").ValueGeneratedNever();
            modelBuilder.Entity<Trainers>().HasKey(@"ID");
        }

        partial void CustomizeTrainersMapping(ModelBuilder modelBuilder);

        #endregion

        #region OPAttendance Mapping

        private void OPAttendanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OPAttendance>().ToTable(@"OPAttendances");
            modelBuilder.Entity<OPAttendance>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<OPAttendance>().Property(x => x.Status).HasColumnName(@"Status").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<OPAttendance>().Property(x => x.Late).HasColumnName(@"Late").ValueGeneratedNever();
            modelBuilder.Entity<OPAttendance>().Property(x => x.Reason).HasColumnName(@"Reason").ValueGeneratedNever();
            modelBuilder.Entity<OPAttendance>().Property(x => x.OperationID).HasColumnName(@"OperationID").ValueGeneratedNever();
            modelBuilder.Entity<OPAttendance>().Property(x => x.UserID).HasColumnName(@"UserID").ValueGeneratedNever();
            modelBuilder.Entity<OPAttendance>().HasKey(@"ID");
        }

        partial void CustomizeOPAttendanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region Attendance Mapping

        private void AttendanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Attendance>().ToTable(@"Attendances");
            modelBuilder.Entity<Attendance>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Attendance>().Property(x => x.Date).HasColumnName(@"Date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Attendance>().Property(x => x.LastChanged).HasColumnName(@"LastChanged").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<Attendance>().Property(x => x.Status).HasColumnName(@"Status").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Attendance>().Property(x => x.UserID).HasColumnName(@"UserID").ValueGeneratedNever();
            modelBuilder.Entity<Attendance>().Property(x => x.AttendanceTakenByID).HasColumnName(@"AttendanceTakenByID").ValueGeneratedNever();
            modelBuilder.Entity<Attendance>().HasKey(@"ID");
        }

        partial void CustomizeAttendanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region Deduction Mapping

        private void DeductionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Deduction>().ToTable(@"Deductions");
            modelBuilder.Entity<Deduction>().Property(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Deduction>().Property(x => x.Points).HasColumnName(@"Points").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Deduction>().Property(x => x.LastDeduction).HasColumnName(@"LastDeduction").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Deduction>().Property(x => x.UserID).HasColumnName(@"UserID").ValueGeneratedNever();
            modelBuilder.Entity<Deduction>().Property(x => x.UserID1).HasColumnName(@"UserID1").ValueGeneratedNever();
            modelBuilder.Entity<Deduction>().HasKey(@"ID");
        }

        partial void CustomizeDeductionMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().HasOne(x => x.Rank).WithMany(op => op.Users).HasForeignKey(@"RankID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.LOAs).WithOne(op => op.User).HasForeignKey(@"UserID").IsRequired(true);
            modelBuilder.Entity<User>().HasOne(x => x.Operation).WithOne(op => op.User).HasForeignKey(typeof(Operation), @"ID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Groups).WithMany(op => op.Users);
            modelBuilder.Entity<User>().HasMany(x => x.Trainers).WithMany(op => op.Users);
            modelBuilder.Entity<User>().HasMany(x => x.Trainings).WithMany(op => op.Users);
            modelBuilder.Entity<User>().HasMany(x => x.OPAttendances).WithOne(op => op.User1).HasForeignKey(@"UserID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Attendances).WithOne(op => op.User).HasForeignKey(@"UserID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.Deductions).WithOne(op => op.User).HasForeignKey(@"UserID").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.DeductionsGiven).WithOne(op => op.DeductedBy).HasForeignKey(@"UserID1").IsRequired(true);
            modelBuilder.Entity<User>().HasMany(x => x.AttendanceTaken).WithOne(op => op.AttendanceTakenBy).HasForeignKey(@"AttendanceTakenByID").IsRequired(true);

            modelBuilder.Entity<Rank>().HasMany(x => x.Users).WithOne(op => op.Rank).HasForeignKey(@"RankID").IsRequired(true);

            modelBuilder.Entity<LOA>().HasOne(x => x.User).WithMany(op => op.LOAs).HasForeignKey(@"UserID").IsRequired(true);

            modelBuilder.Entity<Operation>().HasOne(x => x.User).WithOne(op => op.Operation).HasForeignKey(typeof(User), @"ID").IsRequired(true);
            modelBuilder.Entity<Operation>().HasMany(x => x.Sections).WithOne(op => op.Operation).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"OperationID").IsRequired(true);
            modelBuilder.Entity<Operation>().HasMany(x => x.OPAttendances).WithOne(op => op.Operation).HasForeignKey(@"OperationID").IsRequired(true);
            modelBuilder.Entity<Operation>().HasOne(x => x.Attendance).WithOne(op => op.Operation).OnDelete(DeleteBehavior.SetNull).HasForeignKey(typeof(Attendance), @"ID").IsRequired(true);

            modelBuilder.Entity<Section>().HasOne(x => x.Operation).WithMany(op => op.Sections).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"OperationID").IsRequired(true);
            modelBuilder.Entity<Section>().HasMany(x => x.Slots).WithOne(op => op.Section).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"SectionID").IsRequired(true);

            modelBuilder.Entity<Slot>().HasOne(x => x.Section).WithMany(op => op.Slots).OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"SectionID").IsRequired(true);
            modelBuilder.Entity<Slot>().HasOne(x => x.Training).WithMany(op => op.Slots).HasForeignKey(@"TrainingID").IsRequired(true);
            modelBuilder.Entity<Slot>().HasOne(x => x.OPAttendance).WithOne(op => op.Slot).HasForeignKey(typeof(OPAttendance), @"ID").IsRequired(false);

            modelBuilder.Entity<Training>().HasMany(x => x.Trainers).WithOne(op => op.Training).HasForeignKey(@"TrainingID").IsRequired(true);
            modelBuilder.Entity<Training>().HasMany(x => x.Slots).WithOne(op => op.Training).HasForeignKey(@"TrainingID").IsRequired(true);

            modelBuilder.Entity<Trainers>().HasOne(x => x.Training).WithMany(op => op.Trainers).HasForeignKey(@"TrainingID").IsRequired(true);

            modelBuilder.Entity<OPAttendance>().HasOne(x => x.Operation).WithMany(op => op.OPAttendances).HasForeignKey(@"OperationID").IsRequired(true);
            modelBuilder.Entity<OPAttendance>().HasOne(x => x.User1).WithMany(op => op.OPAttendances).HasForeignKey(@"UserID").IsRequired(true);

            modelBuilder.Entity<Attendance>().HasOne(x => x.User).WithMany(op => op.Attendances).HasForeignKey(@"UserID").IsRequired(true);
            modelBuilder.Entity<Attendance>().HasOne(x => x.Operation).WithOne(op => op.Attendance).OnDelete(DeleteBehavior.SetNull).HasForeignKey(typeof(Operation), @"ID").IsRequired(true);
            modelBuilder.Entity<Attendance>().HasOne(x => x.AttendanceTakenBy).WithMany(op => op.AttendanceTaken).HasForeignKey(@"AttendanceTakenByID").IsRequired(true);

            modelBuilder.Entity<Deduction>().HasOne(x => x.User).WithMany(op => op.Deductions).HasForeignKey(@"UserID").IsRequired(true);
            modelBuilder.Entity<Deduction>().HasOne(x => x.DeductedBy).WithMany(op => op.DeductionsGiven).HasForeignKey(@"UserID1").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
